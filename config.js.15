// Configuration file for Plantoid UI
export const INFURA_PROJECT_ID = "460f40a260564ac4a4f4b3fffb032dad";

// ================================
// PLANTOID-SPECIFIC CONFIGURATION
// ================================
// ðŸŒ± IMPORTANT: Change these values for each different Plantoid installation
//
// For Plantoid #14, you would change:
// - number: 14
// - name: "PLANTOID 14"
// - subtitle: "your custom subtitle"
// - contracts: { sepolia: "0x...", mainnet: "0x..." }
// - description: { main: "...", contributors: {...} }
// - image: "./assets/P14.png"

export const PLANTOID_CONFIG = {
  // Basic info
  number: 15,
  name: "PLANTOID 15",
  subtitle: "enigmatic poet with solarpunk vibes",

  // Visual assets
  image: "./assets/P15.png", // Path to plantoid image
  headerImage: "./assets/header2.png", // Path to header background

  // Contract addresses for each network
  contracts: {
    sepolia: "0x66078a2061A68d5bA6cDdBc81517837dA0C7d7b5",
    mainnet: "0x4073E38f71b2612580E9e381031B0c38B3B4C27E",
  },

  // Description content
  description: {
    main: `Plantoids are the plant equivalent of an android; a robot or a synthetic organism designed to look, act and grow like a plant.

Plantoids are blockchain-based life-forms that live off crypto-currency. They are:
â€¢ autonomous, i.e. not controlled by anyone,
â€¢ self-sufficient as they survive on their own,
â€¢ capable of reproducing themselves.

Yet, like most plants, Plantoids cannot reproduce themselves on their own. They rely on capitalisation (as opposed to pollinisation) to reproduce.
Plantoids collect crypto-currency and then use the collected funds to hire new artists, commissioned to create new replicas of themselves via an evolutionary algorithm.

Every time you feed this Plantoid, it will come alive and engage in a conversation with you. It will then generate an oracle for you, in the form of a poem, and will illustrate this poem with generative AI. The result will be minted as an NFT and be sent back to you, as a sign of gratitude for your contribution to the Plantoid species.`,

    contributors: {
      title: "Contributors",
      intro: `This Plantoid was born out of the contribution of many friends and colleagues, which I am deeply appreciative of.`,
      subtitle: "These include, in particular:",
      list: [
        "Yannick LaDaniel â€” body art and design",
        "Martin Vert â€” electronics wiz",
        "Isaac Patka â€” smart contract architecture",
        "Ben Moskowitz â€” Artificial Intelligence",
        "0xGiulio - smart contract refactoring",
        "Tony Lai â€” for donating the voice",
        "All members of the GLITCH community who made me believe that everything is possible",
      ],
    },
  },
};

// Network configurations
export const NETWORKS = {
  sepolia: {
    name: "Sepolia Testnet",
    chainId: 11155111,
    rpcUrl: `https://sepolia.infura.io/v3/${INFURA_PROJECT_ID}`,
    plantoidAddress: PLANTOID_CONFIG.contracts.sepolia,
    blockExplorer: "https://sepolia.etherscan.io",
    isTestnet: true,
  },
  mainnet: {
    name: "Ethereum Mainnet",
    chainId: 1,
    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_PROJECT_ID}`,
    plantoidAddress: PLANTOID_CONFIG.contracts.mainnet,
    blockExplorer: "https://etherscan.io",
    isTestnet: false,
  },
};

// Default network (can be changed)
export const DEFAULT_NETWORK = "mainnet";

// Network persistence utilities
export const NETWORK_STORAGE = {
  key: "plantoid_selected_network",

  // Get saved network or default
  get() {
    try {
      const saved = localStorage.getItem(this.key);
      return saved && NETWORKS[saved] ? saved : DEFAULT_NETWORK;
    } catch (e) {
      return DEFAULT_NETWORK;
    }
  },

  // Save current network
  set(networkKey) {
    try {
      localStorage.setItem(this.key, networkKey);
    } catch (e) {
      console.warn("Failed to save network preference");
    }
  },
};

// Rate limiting configuration for NFT loading
export const RATE_LIMIT_CONFIG = {
  maxConcurrent: 3, // Maximum concurrent requests to Infura
  delayBetweenBatches: 1000, // Milliseconds between batches
  batchSize: 5, // NFTs per batch
  retryDelay: 2000, // Delay before retrying failed requests
  randomDelay: 200, // Max random delay to spread requests
};
